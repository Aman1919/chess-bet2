// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "postgres"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  password      String
  gamesAsWhite  Game[]        @relation("GamesAsWhite")
  gamesAsBlack  Game[]        @relation("GamesAsBlack")
  rating        Int           @default(800)
  balance       Float         @default(3)
  transactions  Transaction[]
  reports       UserReport[]
  role          Roles         @default(USER)
  status        UserStatus    @default(ACTIVE)
  otp           String?
  otpExpiresAt  DateTime?
}

model Transaction {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  amount           Float
  finalamountInUSD Float
  platform_charges Float
  type             TransactionType
  status           TransactionStatus
  createdAt        DateTime          @default(now())
  signature        String
  checkout_id      String
  api_ref          String            @default("")
  currency         String            @default("USD")
  secret_token     String            @default("")

  @@index([userId])
}

model Game {
  id                 String       @id @default(cuid())
  Move               Move[]
  blackPlayerId      String
  whitePlayerId      String
  whitePlayer        User         @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer        User         @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
  board              String       @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  status             GameStatus?
  result             GameResult?
  gameOutCome        GameOutCome?
  startTime          DateTime     @default(now())
  endTime            DateTime?
  stake              String       @default("")
  isFriendly         Boolean      @default(false)
  areBalancesUpdated Boolean      @default(false)

  @@index([blackPlayerId])
  @@index([whitePlayerId])
}

model Move {
  id         String  @id @default(cuid())
  gameId     String
  Game       Game    @relation(fields: [gameId], references: [id])
  moveNumber Int
  from       String
  to         String
  san        String
  promotion  String?

  @@index([gameId])
}

model UserReport {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}


enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}

enum GameOutCome {
  ACCEPT_DRAW
  RESIGN
  CHECKMATE
  DRAW
  TIMER_EXPIRED
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REFERRAL_COMMISSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Roles {
  USER
  ADMIN
  MODRATOR
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}
